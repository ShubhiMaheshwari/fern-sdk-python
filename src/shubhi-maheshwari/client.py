# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx
import pydantic

from .core.api_error import ApiError
from .core.jsonable_encoder import jsonable_encoder
from .core.remove_none_from_headers import remove_none_from_headers
from .resources.authentication.client import AsyncAuthenticationClient, AuthenticationClient
from .resources.eligibility_ap_is.client import AsyncEligibilityApIsClient, EligibilityApIsClient
from .resources.offers.client import AsyncOffersClient, OffersClient
from .resources.orders.client import AsyncOrdersClient, OrdersClient
from .resources.payment_links.client import AsyncPaymentLinksClient, PaymentLinksClient
from .resources.payments.client import AsyncPaymentsClient, PaymentsClient
from .resources.refunds.client import AsyncRefundsClient, RefundsClient
from .resources.settlements.client import AsyncSettlementsClient, SettlementsClient
from .resources.soft_pos.client import AsyncSoftPosClient, SoftPosClient
from .resources.token_vault.client import AsyncTokenVaultClient, TokenVaultClient
from .types.fetch_pg_recon import FetchPgRecon
from .types.fetch_pg_recon_request_filters import FetchPgReconRequestFilters
from .types.fetch_pg_recon_request_pagination import FetchPgReconRequestPagination
from .types.fetch_settlement import FetchSettlement
from .types.fetch_settlement_recon import FetchSettlementRecon
from .types.fetch_settlement_recon_request import FetchSettlementReconRequest


class ShubhiMaheshwariApi:
    def __init__(
        self,
        *,
        environment: str,
        client_id: typing.Optional[str] = None,
        client_secret: typing.Optional[str] = None,
        api_version: typing.Optional[str] = None,
    ):
        self._environment = environment
        self.client_id = client_id
        self.client_secret = client_secret
        self.api_version = api_version
        self.orders = OrdersClient(
            environment=self._environment,
            client_id=self.client_id,
            client_secret=self.client_secret,
            api_version=self.api_version,
        )
        self.authentication = AuthenticationClient(
            environment=self._environment,
            client_id=self.client_id,
            client_secret=self.client_secret,
            api_version=self.api_version,
        )
        self.payments = PaymentsClient(
            environment=self._environment,
            client_id=self.client_id,
            client_secret=self.client_secret,
            api_version=self.api_version,
        )
        self.offers = OffersClient(
            environment=self._environment,
            client_id=self.client_id,
            client_secret=self.client_secret,
            api_version=self.api_version,
        )
        self.eligibility_ap_is = EligibilityApIsClient(
            environment=self._environment,
            client_id=self.client_id,
            client_secret=self.client_secret,
            api_version=self.api_version,
        )
        self.refunds = RefundsClient(
            environment=self._environment,
            client_id=self.client_id,
            client_secret=self.client_secret,
            api_version=self.api_version,
        )
        self.settlements = SettlementsClient(
            environment=self._environment,
            client_id=self.client_id,
            client_secret=self.client_secret,
            api_version=self.api_version,
        )
        self.payment_links = PaymentLinksClient(
            environment=self._environment,
            client_id=self.client_id,
            client_secret=self.client_secret,
            api_version=self.api_version,
        )
        self.soft_pos = SoftPosClient(
            environment=self._environment,
            client_id=self.client_id,
            client_secret=self.client_secret,
            api_version=self.api_version,
        )
        self.token_vault = TokenVaultClient(
            environment=self._environment,
            client_id=self.client_id,
            client_secret=self.client_secret,
            api_version=self.api_version,
        )

    def post_settlements(
        self, *, request: FetchSettlementReconRequest, accept: typing.Optional[str] = None
    ) -> FetchSettlement:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment}/", "settlements"),
            json=jsonable_encoder(request),
            headers=remove_none_from_headers(
                {
                    "x-client-id": self.client_id,
                    "x-client-secret": self.client_secret,
                    "x-api-version": self.api_version,
                    "Accept": accept,
                }
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(FetchSettlement, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_settlement_recon(
        self, *, request: FetchSettlementReconRequest, accept: typing.Optional[str] = None
    ) -> FetchSettlementRecon:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment}/", "settlement/recon"),
            json=jsonable_encoder(request),
            headers=remove_none_from_headers(
                {
                    "x-client-id": self.client_id,
                    "x-client-secret": self.client_secret,
                    "x-api-version": self.api_version,
                    "Accept": accept,
                }
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(FetchSettlementRecon, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def post_recon(
        self,
        *,
        pagination: FetchPgReconRequestPagination,
        filters: FetchPgReconRequestFilters,
        accept: typing.Optional[str] = None,
    ) -> FetchPgRecon:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment}/", "recon"),
            json=jsonable_encoder({"pagination": pagination, "filters": filters}),
            headers=remove_none_from_headers(
                {
                    "x-client-id": self.client_id,
                    "x-client-secret": self.client_secret,
                    "x-api-version": self.api_version,
                    "Accept": accept,
                }
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(FetchPgRecon, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncShubhiMaheshwariApi:
    def __init__(
        self,
        *,
        environment: str,
        client_id: typing.Optional[str] = None,
        client_secret: typing.Optional[str] = None,
        api_version: typing.Optional[str] = None,
    ):
        self._environment = environment
        self.client_id = client_id
        self.client_secret = client_secret
        self.api_version = api_version
        self.orders = AsyncOrdersClient(
            environment=self._environment,
            client_id=self.client_id,
            client_secret=self.client_secret,
            api_version=self.api_version,
        )
        self.authentication = AsyncAuthenticationClient(
            environment=self._environment,
            client_id=self.client_id,
            client_secret=self.client_secret,
            api_version=self.api_version,
        )
        self.payments = AsyncPaymentsClient(
            environment=self._environment,
            client_id=self.client_id,
            client_secret=self.client_secret,
            api_version=self.api_version,
        )
        self.offers = AsyncOffersClient(
            environment=self._environment,
            client_id=self.client_id,
            client_secret=self.client_secret,
            api_version=self.api_version,
        )
        self.eligibility_ap_is = AsyncEligibilityApIsClient(
            environment=self._environment,
            client_id=self.client_id,
            client_secret=self.client_secret,
            api_version=self.api_version,
        )
        self.refunds = AsyncRefundsClient(
            environment=self._environment,
            client_id=self.client_id,
            client_secret=self.client_secret,
            api_version=self.api_version,
        )
        self.settlements = AsyncSettlementsClient(
            environment=self._environment,
            client_id=self.client_id,
            client_secret=self.client_secret,
            api_version=self.api_version,
        )
        self.payment_links = AsyncPaymentLinksClient(
            environment=self._environment,
            client_id=self.client_id,
            client_secret=self.client_secret,
            api_version=self.api_version,
        )
        self.soft_pos = AsyncSoftPosClient(
            environment=self._environment,
            client_id=self.client_id,
            client_secret=self.client_secret,
            api_version=self.api_version,
        )
        self.token_vault = AsyncTokenVaultClient(
            environment=self._environment,
            client_id=self.client_id,
            client_secret=self.client_secret,
            api_version=self.api_version,
        )

    async def post_settlements(
        self, *, request: FetchSettlementReconRequest, accept: typing.Optional[str] = None
    ) -> FetchSettlement:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment}/", "settlements"),
                json=jsonable_encoder(request),
                headers=remove_none_from_headers(
                    {
                        "x-client-id": self.client_id,
                        "x-client-secret": self.client_secret,
                        "x-api-version": self.api_version,
                        "Accept": accept,
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(FetchSettlement, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_settlement_recon(
        self, *, request: FetchSettlementReconRequest, accept: typing.Optional[str] = None
    ) -> FetchSettlementRecon:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment}/", "settlement/recon"),
                json=jsonable_encoder(request),
                headers=remove_none_from_headers(
                    {
                        "x-client-id": self.client_id,
                        "x-client-secret": self.client_secret,
                        "x-api-version": self.api_version,
                        "Accept": accept,
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(FetchSettlementRecon, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def post_recon(
        self,
        *,
        pagination: FetchPgReconRequestPagination,
        filters: FetchPgReconRequestFilters,
        accept: typing.Optional[str] = None,
    ) -> FetchPgRecon:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment}/", "recon"),
                json=jsonable_encoder({"pagination": pagination, "filters": filters}),
                headers=remove_none_from_headers(
                    {
                        "x-client-id": self.client_id,
                        "x-client-secret": self.client_secret,
                        "x-api-version": self.api_version,
                        "Accept": accept,
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(FetchPgRecon, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
