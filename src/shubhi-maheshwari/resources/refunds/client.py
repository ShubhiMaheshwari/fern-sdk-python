# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx
import pydantic

from ...core.api_error import ApiError
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_headers import remove_none_from_headers
from ...types.create_refund_request_refund_speed import CreateRefundRequestRefundSpeed
from ...types.refunds_entity import RefundsEntity
from ...types.vendor_split import VendorSplit

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RefundsClient:
    def __init__(
        self,
        *,
        environment: str,
        client_id: typing.Optional[str] = None,
        client_secret: typing.Optional[str] = None,
        api_version: typing.Optional[str] = None,
    ):
        self._environment = environment
        self.client_id = client_id
        self.client_secret = client_secret
        self.api_version = api_version

    def getallrefundsfororder(self, order_id: str) -> typing.List[RefundsEntity]:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", f"orders/{order_id}/refunds"),
            headers=remove_none_from_headers(
                {
                    "x-client-id": self.client_id,
                    "x-client-secret": self.client_secret,
                    "x-api-version": self.api_version,
                }
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[RefundsEntity], _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def createrefund(
        self,
        order_id: str,
        *,
        refund_amount: float,
        refund_id: str,
        refund_note: typing.Optional[str] = OMIT,
        refund_speed: typing.Optional[CreateRefundRequestRefundSpeed] = OMIT,
        refund_splits: typing.Optional[typing.List[VendorSplit]] = OMIT,
    ) -> RefundsEntity:
        _request: typing.Dict[str, typing.Any] = {"refund_amount": refund_amount, "refund_id": refund_id}
        if refund_note is not OMIT:
            _request["refund_note"] = refund_note
        if refund_speed is not OMIT:
            _request["refund_speed"] = refund_speed
        if refund_splits is not OMIT:
            _request["refund_splits"] = refund_splits
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment}/", f"orders/{order_id}/refunds"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers(
                {
                    "x-client-id": self.client_id,
                    "x-client-secret": self.client_secret,
                    "x-api-version": self.api_version,
                }
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(RefundsEntity, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_refund(self, order_id: str, refund_id: str) -> RefundsEntity:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", f"orders/{order_id}/refunds/{refund_id}"),
            headers=remove_none_from_headers(
                {
                    "x-client-id": self.client_id,
                    "x-client-secret": self.client_secret,
                    "x-api-version": self.api_version,
                }
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(RefundsEntity, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncRefundsClient:
    def __init__(
        self,
        *,
        environment: str,
        client_id: typing.Optional[str] = None,
        client_secret: typing.Optional[str] = None,
        api_version: typing.Optional[str] = None,
    ):
        self._environment = environment
        self.client_id = client_id
        self.client_secret = client_secret
        self.api_version = api_version

    async def getallrefundsfororder(self, order_id: str) -> typing.List[RefundsEntity]:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET",
                urllib.parse.urljoin(f"{self._environment}/", f"orders/{order_id}/refunds"),
                headers=remove_none_from_headers(
                    {
                        "x-client-id": self.client_id,
                        "x-client-secret": self.client_secret,
                        "x-api-version": self.api_version,
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[RefundsEntity], _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def createrefund(
        self,
        order_id: str,
        *,
        refund_amount: float,
        refund_id: str,
        refund_note: typing.Optional[str] = OMIT,
        refund_speed: typing.Optional[CreateRefundRequestRefundSpeed] = OMIT,
        refund_splits: typing.Optional[typing.List[VendorSplit]] = OMIT,
    ) -> RefundsEntity:
        _request: typing.Dict[str, typing.Any] = {"refund_amount": refund_amount, "refund_id": refund_id}
        if refund_note is not OMIT:
            _request["refund_note"] = refund_note
        if refund_speed is not OMIT:
            _request["refund_speed"] = refund_speed
        if refund_splits is not OMIT:
            _request["refund_splits"] = refund_splits
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment}/", f"orders/{order_id}/refunds"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers(
                    {
                        "x-client-id": self.client_id,
                        "x-client-secret": self.client_secret,
                        "x-api-version": self.api_version,
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(RefundsEntity, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_refund(self, order_id: str, refund_id: str) -> RefundsEntity:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET",
                urllib.parse.urljoin(f"{self._environment}/", f"orders/{order_id}/refunds/{refund_id}"),
                headers=remove_none_from_headers(
                    {
                        "x-client-id": self.client_id,
                        "x-client-secret": self.client_secret,
                        "x-api-version": self.api_version,
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(RefundsEntity, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
