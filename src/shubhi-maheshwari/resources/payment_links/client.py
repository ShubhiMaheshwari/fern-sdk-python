# This file was auto-generated by Fern from our API Definition.

import typing
import urllib.parse
from json.decoder import JSONDecodeError

import httpx
import pydantic

from ...core.api_error import ApiError
from ...core.jsonable_encoder import jsonable_encoder
from ...core.remove_none_from_headers import remove_none_from_headers
from ...errors.bad_request_error import BadRequestError
from ...types.link_cancelled_error import LinkCancelledError
from ...types.link_cancelled_response import LinkCancelledResponse
from ...types.link_customer_details_entity import LinkCustomerDetailsEntity
from ...types.link_meta_entity import LinkMetaEntity
from ...types.link_notes_entity import LinkNotesEntity
from ...types.link_notify_entity import LinkNotifyEntity
from ...types.link_orders_response import LinkOrdersResponse
from ...types.link_response import LinkResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class PaymentLinksClient:
    def __init__(
        self,
        *,
        environment: str,
        client_id: typing.Optional[str] = None,
        client_secret: typing.Optional[str] = None,
        api_version: typing.Optional[str] = None,
    ):
        self._environment = environment
        self.client_id = client_id
        self.client_secret = client_secret
        self.api_version = api_version

    def create_payment_link(
        self,
        *,
        link_id: str,
        link_amount: float,
        link_currency: str,
        link_purpose: str,
        customer_details: LinkCustomerDetailsEntity,
        link_partial_payments: typing.Optional[bool] = OMIT,
        link_minimum_partial_amount: typing.Optional[float] = OMIT,
        link_expiry_time: typing.Optional[str] = OMIT,
        link_notify: typing.Optional[LinkNotifyEntity] = OMIT,
        link_auto_reminders: typing.Optional[bool] = OMIT,
        link_notes: typing.Optional[LinkNotesEntity] = OMIT,
        link_meta: typing.Optional[LinkMetaEntity] = OMIT,
    ) -> LinkResponse:
        _request: typing.Dict[str, typing.Any] = {
            "link_id": link_id,
            "link_amount": link_amount,
            "link_currency": link_currency,
            "link_purpose": link_purpose,
            "customer_details": customer_details,
        }
        if link_partial_payments is not OMIT:
            _request["link_partial_payments"] = link_partial_payments
        if link_minimum_partial_amount is not OMIT:
            _request["link_minimum_partial_amount"] = link_minimum_partial_amount
        if link_expiry_time is not OMIT:
            _request["link_expiry_time"] = link_expiry_time
        if link_notify is not OMIT:
            _request["link_notify"] = link_notify
        if link_auto_reminders is not OMIT:
            _request["link_auto_reminders"] = link_auto_reminders
        if link_notes is not OMIT:
            _request["link_notes"] = link_notes
        if link_meta is not OMIT:
            _request["link_meta"] = link_meta
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment}/", "links"),
            json=jsonable_encoder(_request),
            headers=remove_none_from_headers(
                {
                    "x-client-id": self.client_id,
                    "x-client-secret": self.client_secret,
                    "x-api-version": self.api_version,
                }
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(LinkResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_payment_link_details(self, link_id: str) -> LinkResponse:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", f"links/{link_id}"),
            headers=remove_none_from_headers(
                {
                    "x-client-id": self.client_id,
                    "x-client-secret": self.client_secret,
                    "x-api-version": self.api_version,
                }
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(LinkResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_payment_link_orders(self, link_id: str) -> typing.List[LinkOrdersResponse]:
        _response = httpx.request(
            "GET",
            urllib.parse.urljoin(f"{self._environment}/", f"links/{link_id}/orders"),
            headers=remove_none_from_headers(
                {
                    "x-client-id": self.client_id,
                    "x-client-secret": self.client_secret,
                    "x-api-version": self.api_version,
                }
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[LinkOrdersResponse], _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def cancel_payment_link(self, link_id: str) -> LinkCancelledResponse:
        _response = httpx.request(
            "POST",
            urllib.parse.urljoin(f"{self._environment}/", f"links/{link_id}/cancel"),
            headers=remove_none_from_headers(
                {
                    "x-client-id": self.client_id,
                    "x-client-secret": self.client_secret,
                    "x-api-version": self.api_version,
                }
            ),
            timeout=60,
        )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(LinkCancelledResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(LinkCancelledError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncPaymentLinksClient:
    def __init__(
        self,
        *,
        environment: str,
        client_id: typing.Optional[str] = None,
        client_secret: typing.Optional[str] = None,
        api_version: typing.Optional[str] = None,
    ):
        self._environment = environment
        self.client_id = client_id
        self.client_secret = client_secret
        self.api_version = api_version

    async def create_payment_link(
        self,
        *,
        link_id: str,
        link_amount: float,
        link_currency: str,
        link_purpose: str,
        customer_details: LinkCustomerDetailsEntity,
        link_partial_payments: typing.Optional[bool] = OMIT,
        link_minimum_partial_amount: typing.Optional[float] = OMIT,
        link_expiry_time: typing.Optional[str] = OMIT,
        link_notify: typing.Optional[LinkNotifyEntity] = OMIT,
        link_auto_reminders: typing.Optional[bool] = OMIT,
        link_notes: typing.Optional[LinkNotesEntity] = OMIT,
        link_meta: typing.Optional[LinkMetaEntity] = OMIT,
    ) -> LinkResponse:
        _request: typing.Dict[str, typing.Any] = {
            "link_id": link_id,
            "link_amount": link_amount,
            "link_currency": link_currency,
            "link_purpose": link_purpose,
            "customer_details": customer_details,
        }
        if link_partial_payments is not OMIT:
            _request["link_partial_payments"] = link_partial_payments
        if link_minimum_partial_amount is not OMIT:
            _request["link_minimum_partial_amount"] = link_minimum_partial_amount
        if link_expiry_time is not OMIT:
            _request["link_expiry_time"] = link_expiry_time
        if link_notify is not OMIT:
            _request["link_notify"] = link_notify
        if link_auto_reminders is not OMIT:
            _request["link_auto_reminders"] = link_auto_reminders
        if link_notes is not OMIT:
            _request["link_notes"] = link_notes
        if link_meta is not OMIT:
            _request["link_meta"] = link_meta
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment}/", "links"),
                json=jsonable_encoder(_request),
                headers=remove_none_from_headers(
                    {
                        "x-client-id": self.client_id,
                        "x-client-secret": self.client_secret,
                        "x-api-version": self.api_version,
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(LinkResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_payment_link_details(self, link_id: str) -> LinkResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET",
                urllib.parse.urljoin(f"{self._environment}/", f"links/{link_id}"),
                headers=remove_none_from_headers(
                    {
                        "x-client-id": self.client_id,
                        "x-client-secret": self.client_secret,
                        "x-api-version": self.api_version,
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(LinkResponse, _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_payment_link_orders(self, link_id: str) -> typing.List[LinkOrdersResponse]:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "GET",
                urllib.parse.urljoin(f"{self._environment}/", f"links/{link_id}/orders"),
                headers=remove_none_from_headers(
                    {
                        "x-client-id": self.client_id,
                        "x-client-secret": self.client_secret,
                        "x-api-version": self.api_version,
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(typing.List[LinkOrdersResponse], _response.json())  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def cancel_payment_link(self, link_id: str) -> LinkCancelledResponse:
        async with httpx.AsyncClient() as _client:
            _response = await _client.request(
                "POST",
                urllib.parse.urljoin(f"{self._environment}/", f"links/{link_id}/cancel"),
                headers=remove_none_from_headers(
                    {
                        "x-client-id": self.client_id,
                        "x-client-secret": self.client_secret,
                        "x-api-version": self.api_version,
                    }
                ),
                timeout=60,
            )
        if 200 <= _response.status_code < 300:
            return pydantic.parse_obj_as(LinkCancelledResponse, _response.json())  # type: ignore
        if _response.status_code == 400:
            raise BadRequestError(pydantic.parse_obj_as(LinkCancelledError, _response.json()))  # type: ignore
        try:
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
