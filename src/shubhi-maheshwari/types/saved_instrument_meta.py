# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class SavedInstrumentMeta(pydantic.BaseModel):
    card_network: typing.Optional[str] = pydantic.Field(description=("card scheme/network of the saved card\n"))
    card_bank_name: typing.Optional[str] = pydantic.Field(description=("Issuing bank name of saved card\n"))
    card_country: typing.Optional[str] = pydantic.Field(description=("Issuing country of saved card\n"))
    card_type: typing.Optional[str] = pydantic.Field(description=("Type of saved card\n"))
    card_token_details: typing.Optional[typing.Dict[str, typing.Any]]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
