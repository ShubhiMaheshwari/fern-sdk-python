# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .order_pay_data import OrderPayData
from .order_pay_response_action import OrderPayResponseAction
from .order_pay_response_channel import OrderPayResponseChannel
from .order_pay_response_payment_method import OrderPayResponsePaymentMethod


class OrderPayResponse(pydantic.BaseModel):
    cf_payment_id: typing.Optional[int] = pydantic.Field(description=("Payment identifier created by Cashfree\n"))
    payment_method: typing.Optional[OrderPayResponsePaymentMethod] = pydantic.Field(
        description=('One of ["upi", "netbanking", "card", "app", "cardless_emi", "paylater"] \n')
    )
    channel: typing.Optional[OrderPayResponseChannel] = pydantic.Field(
        description=(
            "One of [\"link\", \"collect\", \"qrcode\"]. In an older version we used to support different channels like 'gpay', 'phonepe' etc. However, we now support only the following channels - link, collect and qrcode. To process payments using gpay, you will have to provide channel as 'link' and provider as 'gpay'\n"
        )
    )
    action: typing.Optional[OrderPayResponseAction] = pydantic.Field(
        description=('One of ["link", "custom", "form"]\n')
    )
    data: typing.Optional[OrderPayData]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
