# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
import typing_extensions

from ..core.datetime_utils import serialize_datetime
from .refund_speed import RefundSpeed
from .refunds_entity_refund_mode import RefundsEntityRefundMode
from .refunds_entity_refund_status import RefundsEntityRefundStatus
from .refunds_entity_refund_type import RefundsEntityRefundType
from .vendor_split import VendorSplit


class RefundsEntity(pydantic.BaseModel):
    cf_payment_id: typing.Optional[int] = pydantic.Field(
        description=("Cashfree Payments ID of the payment for which refund is initiated\n")
    )
    cf_refund_id: typing.Optional[str] = pydantic.Field(description=("Cashfree Payments ID for a refund\n"))
    order_id: typing.Optional[str] = pydantic.Field(
        description=("Merchant’s order Id of the order for which refund is initiated\n")
    )
    refund_id: typing.Optional[str] = pydantic.Field(description=("Merchant’s refund ID of the refund\n"))
    entity: typing.Optional[typing_extensions.Literal["refund"]]
    refund_amount: typing.Optional[float] = pydantic.Field(description=("Amount that is refunded\n"))
    refund_currency: typing.Optional[str] = pydantic.Field(description=("Currency of the refund amount\n"))
    refund_note: typing.Optional[str] = pydantic.Field(description=("Note added by merchant for the refund\n"))
    refund_status: typing.Optional[RefundsEntityRefundStatus] = pydantic.Field(
        description=('This can be one of ["SUCCESS", "PENDING", "CANCELLED", "ONHOLD", "FAILED"]\n')
    )
    refund_arn: typing.Optional[str] = pydantic.Field(description=("The bank reference number for refund\n"))
    refund_charge: typing.Optional[float] = pydantic.Field(description=("Charges in INR for processing refund\n"))
    status_description: typing.Optional[str] = pydantic.Field(description=("Description of refund status\n"))
    metadata: typing.Optional[typing.Dict[str, typing.Any]] = pydantic.Field(
        description=(
            "Key-value pair that can be used to store additional information about the entity. Maximum 5 key-value pairs\n"
        )
    )
    refund_splits: typing.Optional[typing.List[VendorSplit]]
    refund_type: typing.Optional[RefundsEntityRefundType] = pydantic.Field(
        description=('This can be one of ["PAYMENT_AUTO_REFUND", "MERCHANT_INITIATED", "UNRECONCILED_AUTO_REFUND"]\n')
    )
    refund_mode: typing.Optional[RefundsEntityRefundMode] = pydantic.Field(
        description=("Method or speed of processing refund\n")
    )
    created_at: typing.Optional[str] = pydantic.Field(description=("Time of refund creation\n"))
    processed_at: typing.Optional[str] = pydantic.Field(description=("Time when refund was processed successfully\n"))
    refund_speed: typing.Optional[RefundSpeed]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
