# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .upi_authorize_details import UpiAuthorizeDetails
from .upi_channel import UpiChannel


class Upi(pydantic.BaseModel):
    channel: UpiChannel = pydantic.Field(
        description=(
            'Specify the channel through which the payment must be processed. Can be one of ["link", "collect", "qrcode"]\n'
        )
    )
    upi_id: typing.Optional[str] = pydantic.Field(description=("Customer UPI VPA to process payment.\n"))
    upi_expiry_minutes: typing.Optional[float] = pydantic.Field(
        description=(
            "The UPI request will be valid for this expiry minutes. This parameter is only applicable for a UPI collect payment. The default value is 5 minutes. You should keep the minimum as 5 minutes, and maximum as 15 minutes\n"
        )
    )
    authorize_only: typing.Optional[bool] = pydantic.Field(
        description=(
            'For one time mandate on UPI. Set this as authorize_only = true. Please note that you can only use the "collect" channel if you are sending a one time mandate request\n'
        )
    )
    authorization: typing.Optional[UpiAuthorizeDetails]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
