# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .cashback_details_cashback_type import CashbackDetailsCashbackType


class CashbackDetails(pydantic.BaseModel):
    cashback_type: typing.Optional[CashbackDetailsCashbackType] = pydantic.Field(description=("Type of discount\n"))
    cashback_value: typing.Optional[str] = pydantic.Field(
        description=('Value of Discount. <span style="white-space: nowrap">`<= 100 characters`</span> \n')
    )
    max_cashback_amount: str = pydantic.Field(
        description=(
            'Maximum Value of Cashback allowed. <span style="white-space: nowrap">`<= 100 characters`</span> \n'
        )
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
