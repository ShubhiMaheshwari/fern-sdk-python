# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class FetchSettlementReconRequestPagination(pydantic.BaseModel):
    """
    To fetch the next set of settlements, pass the cursor received in the response to the next API call.
     To receive the data for the first time, pass the cursor as null.
     Limit would be number of settlements that you want to receive.
    """

    limit: int = pydantic.Field(
        description=("The number of settlements you want to fetch. Maximum limit is 1000, default value is 10.\n")
    )
    cursor: typing.Optional[str] = pydantic.Field(
        description=("Specifies from where the next set of settlement details should be fetched.\n")
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
