# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class Cryptogram(pydantic.BaseModel):
    instrument_id: typing.Optional[str] = pydantic.Field(description=("instrument_id of saved instrument\n"))
    token_requestor_id: typing.Optional[str] = pydantic.Field(description=("TRID issued by card networks\n"))
    card_number: typing.Optional[str] = pydantic.Field(description=("token pan number\n"))
    card_expiry_mm: typing.Optional[str] = pydantic.Field(description=("token pan expiry month\n"))
    card_expiry_yy: typing.Optional[str] = pydantic.Field(description=("token pan expiry year\n"))
    cryptogram: typing.Optional[str] = pydantic.Field(description=("cryptogram\n"))
    card_display: typing.Optional[str] = pydantic.Field(description=("last 4 digits of original card number\n"))

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
