# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .link_customer_details_entity import LinkCustomerDetailsEntity
from .payment_url_object import PaymentUrlObject
from .refund_url_object import RefundUrlObject
from .settlement_url_object import SettlementUrlObject


class LinkOrdersResponse(pydantic.BaseModel):
    cf_order_id: typing.Optional[int]
    order_id: typing.Optional[str]
    entity: typing.Optional[str]
    order_currency: typing.Optional[str]
    order_amount: typing.Optional[float]
    order_status: typing.Optional[str]
    order_token: typing.Optional[str]
    order_expiry_time: typing.Optional[str]
    order_note: typing.Optional[str]
    customer_details: typing.Optional[LinkCustomerDetailsEntity]
    payments: typing.Optional[PaymentUrlObject]
    settlements: typing.Optional[SettlementUrlObject]
    refunds: typing.Optional[RefundUrlObject]

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
