# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class PaymentsEntityPaymentStatus(str, enum.Enum):
    """
    The transaction status can be one of  ["SUCCESS", "NOT_ATTEMPTED", "FAILED", "USER_DROPPED", "VOID", "CANCELLED", "PENDING"]
    """

    SUCCESS = "SUCCESS"
    NOT_ATTEMPTED = "NOT_ATTEMPTED"
    FAILED = "FAILED"
    USER_DROPPED = "USER_DROPPED"
    VOID = "VOID"
    CANCELLED = "CANCELLED"
    PENDING = "PENDING"

    def visit(
        self,
        success: typing.Callable[[], T_Result],
        not_attempted: typing.Callable[[], T_Result],
        failed: typing.Callable[[], T_Result],
        user_dropped: typing.Callable[[], T_Result],
        void: typing.Callable[[], T_Result],
        cancelled: typing.Callable[[], T_Result],
        pending: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is PaymentsEntityPaymentStatus.SUCCESS:
            return success()
        if self is PaymentsEntityPaymentStatus.NOT_ATTEMPTED:
            return not_attempted()
        if self is PaymentsEntityPaymentStatus.FAILED:
            return failed()
        if self is PaymentsEntityPaymentStatus.USER_DROPPED:
            return user_dropped()
        if self is PaymentsEntityPaymentStatus.VOID:
            return void()
        if self is PaymentsEntityPaymentStatus.CANCELLED:
            return cancelled()
        if self is PaymentsEntityPaymentStatus.PENDING:
            return pending()
