# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .cardless_emi_provider import CardlessEmiProvider


class CardlessEmi(pydantic.BaseModel):
    channel: typing.Optional[str] = pydantic.Field(description=("The channel for cardless EMI is always `link`\n"))
    provider: typing.Optional[CardlessEmiProvider] = pydantic.Field(
        description=("One of [`flexmoney`, `zestmoney`, `hdfc`, `icici`, `cashe`, `idfc`, `kotak`]\n")
    )
    phone: typing.Optional[str] = pydantic.Field(
        description=(
            "Customers phone number for this payment instrument. If the customer is not eligible you will receive a 400 error with type as 'invalid_request_error' and code as 'invalid_request_error'\n"
        )
    )
    emi_tenure: typing.Optional[int] = pydantic.Field(
        description=(
            "EMI tenure for the selected provider. This is mandatory when provider is one of [`hdfc`, `icici`, `cashe`, `idfc`, `kotak`]\n"
        )
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
