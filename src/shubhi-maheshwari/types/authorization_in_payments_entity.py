# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .authorization_in_payments_entity_action import AuthorizationInPaymentsEntityAction
from .authorization_in_payments_entity_status import AuthorizationInPaymentsEntityStatus


class AuthorizationInPaymentsEntity(pydantic.BaseModel):
    """
    The authorization details are present for payments which go through the preauthorization workflow. Or else this parameter will be null.
    """

    action: typing.Optional[AuthorizationInPaymentsEntityAction] = pydantic.Field(
        description=("One of CAPTURE or VOID\n")
    )
    status: typing.Optional[AuthorizationInPaymentsEntityStatus] = pydantic.Field(
        description=("One of SUCCESS or PENDING\n")
    )
    captured_amount: typing.Optional[float] = pydantic.Field(
        description=("The captured amount for this authorization request\n")
    )
    start_time: typing.Optional[str] = pydantic.Field(
        description=("Start time of this authorization hold (only for UPI)\n")
    )
    end_time: typing.Optional[str] = pydantic.Field(
        description=("End time of this authorization hold (only for UPI)\n")
    )
    approve_by: typing.Optional[str] = pydantic.Field(
        description=("Approve by time as passed in the authorization request (only for UPI)\n")
    )
    action_reference: typing.Optional[str] = pydantic.Field(
        description=("CAPTURE or VOID reference number based on action \n")
    )
    action_time: typing.Optional[str] = pydantic.Field(description=("Time of action (CAPTURE or VOID)\n"))

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
