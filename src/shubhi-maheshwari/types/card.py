# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .card_card_bank_name import CardCardBankName
from .card_channel import CardChannel


class Card(pydantic.BaseModel):
    channel: typing.Optional[CardChannel] = pydantic.Field(
        description=(
            'The channel for card payments can be "link" or "post". Post is used for seamless OTP payments where merchant captures OTP on their own page.\n'
        )
    )
    card_number: typing.Optional[str] = pydantic.Field(
        description=(
            "Customer card number for plain card transactions. Token pan number for tokenized card transactions.\n"
        )
    )
    card_holder_name: typing.Optional[str] = pydantic.Field(description=("Customer name mentioned on the card.\n"))
    card_expiry_mm: typing.Optional[str] = pydantic.Field(
        description=(
            "Card expiry month for plain card transactions. Token expiry month for tokenized card transactions.\n"
        )
    )
    card_expiry_yy: typing.Optional[str] = pydantic.Field(
        description=(
            "Card expiry year for plain card transactions. Token expiry year for tokenized card transactions.\n"
        )
    )
    card_cvv: typing.Optional[str] = pydantic.Field(description=("CVV mentioned on the card.\n"))
    instrument_id: typing.Optional[str] = pydantic.Field(
        description=("instrument id of saved card. Required only to make payment using saved instrument.\n")
    )
    cryptogram: typing.Optional[str] = pydantic.Field(
        description=("cryptogram received from card network. Required only for tokenized card transactions.\n")
    )
    token_requestor_id: typing.Optional[str] = pydantic.Field(
        description=("TRID issued by card networks. Required only for tokenized card transactions.\n")
    )
    card_display: typing.Optional[str] = pydantic.Field(
        description=("last 4 digits of original card number. Required only for tokenized card transactions.\n")
    )
    card_alias: typing.Optional[str] = pydantic.Field(description=("Card alias as returned by Cashfree Vault API.\n"))
    card_bank_name: typing.Optional[CardCardBankName] = pydantic.Field(
        description=(
            'One of ["Kotak", "ICICI", "RBL", "BOB", "Standard Chartered"]. Card bank name, required for EMI payments. This is the bank user has selected for EMI\n'
        )
    )
    emi_tenure: typing.Optional[int] = pydantic.Field(description=("EMI tenure selected by the user\n"))

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        json_encoders = {dt.datetime: serialize_datetime}
